import mudata as md
import pandas as pd
pd.set_option('display.max_columns', None)
mudata_input_fp = "data/gasperini_inference_input_minimal.h5mu"
inference_input_minimal = md.read_h5mu(mudata_input_fp)
inference_input
inference_input_minimal
input_minimal = md.read_h5mu(mudata_input_fp)
input_minimal
input_minimal['gene']
input_minimal['gene'].X
input_minimal['gene']
input_minimal['gene'].X[:5,:5].to_df()
input_minimal['gene'][:5,:5].to_df()
input_minimal['gene'][:3,:3].to_df()
input_minimal['gene'][:3,:3]
input_minimal['gene'][:3,:3].to_df()
input_minimal['gene']
input_minimal['guide']
input_minimal['guide'][:3,:3].to_df()
input_minimal['guide'].layers
input_minimal['guide'].layers['guide_assignment']
input_minimal['gene'].X
input_minimal['gene'][:3,:3].to_df()
input_minimal['gene'].X[:3,:3].to_df()
input_minimal['gene'][:3,:3].to_df()
input_minimal['guide'].layers['guide_assignment'][:3,:3].to_df()
input_minimal['guide'].layers['guide_assignment']
input_minimal['guide']
input_minimal['guide'].layers['guide_assignment'][:3,:3]
input_minimal['guide'].layers['guide_assignment'][:3,:3].to_df()
input_minimal['guide'].layers['guide_assignment'][:3,:3]
input_minimal['guide'].layers['guide_assignment'][:3,:3].to_array()
input_minimal['guide'].layers['guide_assignment'][:3,:3].toarray()
input_minimal['guide'].X[:3,:3]
input_minimal['guide'].layers['guide_assignment']
def layer_to_df(adata, layer_name, nrows, ncols):
"""Convert a slice of an AnnData layer to a pandas DataFrame including row and column names."""
sparse_slice = adata.layers[layer_name][:nrows, :ncols]
dense_slice = sparse_slice.toarray()
row_names = adata.obs_names[:nrows]
column_names = adata.var_names[:ncols]
return pd.DataFrame(dense_slice, index=row_names, columns=column_names)
layer_to_df(input_minimal['guide'], 'guide_assignment', 3, 3)
print(layer_to_df(input_minimal['guide'], 'guide_assignment', 3, 3))
input_minimal['guide'].layers['guide_assignment']
input_minimal['guide'].layers['X']
input_minimal['guide'].layers['guide_assignment'][:3,:3].toarray()
input_minimal['guide'][:3,:3].to_df()
input_minimal['guide'][:10,:10].to_df()
cell_ids = [
"GCTTGAATCGAATGCT-1_1B_1_SI-GA-F2",
"GGTGAAGCACCAGGCT-1_1A_6_SI-GA-E7",
"AGTGAGGTCCGTACAA-1_1A_2_SI-GA-E3"
]
grna_ids = [
"GCCCTGCTACCCACTTACAG",
"ATGTAGAAGGAGACACCGGG",
"ACCCAGACTCCAGATCGGGG"
]
input_minimal['guide'].X
input_minimal['guide'].X.loc[cell_ids, grna_ids]
input_minimal['guide'].loc[cell_ids, grna_ids]
input_minimal['guide'][cell_ids, grna_ids]
input_minimal['guide'][cell_ids, grna_ids].to_df()
input_minimal['guide'][cell_ids, grna_ids].X.toarray()
pd.DataFrame(input_minimal['guide'][cell_ids, grna_ids].X.toarray(), index = cell_ids, columns = grna_ids)
pd.DataFrame(input_minimal['guide'][cell_ids, grna_ids].X.toarray(),
index = cell_ids,
columns = grna_ids)
pd.DataFrame(input_minimal['guide'][cell_ids, grna_ids].layers['guide_assignment'].toarray(),
index = cell_ids,
columns = grna_ids)
input_minimal['guide'].X
input_minimal['guide'].layers['guide_assignment']
input_minimal.uns['pairs_to_test']
pd.DataFrame(input_minimal.uns['pairs_to_test'])
mudata_input_fp = "data/gasperini_inference_input.h5mu"
mudata_input_fp = "data/gasperini_inference_input.h5mu"
input_optional = md.read_h5mu(mudata_input_fp)
input_optional
input_optional['gene'].obs
input_optional.mod['gene'].obs
input_optional.['gene'].obs
input_optional['gene'].obs
input_optional['gene'].var
input_optional['guide'].obs
input_optional['guide'].var
mudata_output_fp = "data/gasperini_inference_output.h5mu"
output_optional = md.read_h5mu(mudata_output_fp)
output_optional
pd.DataFrame(inference_output.uns['test_results'])
pd.DataFrame(output_optional.uns['test_results'])
input_optional['guide'].var.iloc[[0, 1, 20, 21, 30, 31]]
library(MuData)
input_minimal[['guide']]
metadata(input_minimal[['guide']])
metadata(input_optional)
mudata = md.read_h5mu(mudata_input_fp)
pairs_to_test = pd.DataFrame(mudata.metadata['pairs_to_test'])
moi = mudata['guide'].metadata['moi']
moi
mudata = md.read_h5mu(mudata_input_fp)
# Extract pairs to test and MOI from metadata
pairs_to_test = pd.DataFrame(mudata.metadata['pairs_to_test'])
pairs_to_test = pd.DataFrame(mudata.uns['pairs_to_test'])
moi = mudata['guide'].uns['moi']
moi
moi = mudata['guide'].uns['moi'][0]
moi
guide_df = pd.DataFrame(mudata['guide'].obs)
non_targeting_guides = guide_df[guide_df['targeting'] == 'TRUE'].index
guide_df['targeting']
print(guide_df['targeting'])
guide_df
guide_df = pd.DataFrame(mudata['guide'].var)
guide_df
non_targeting_guides = guide_df[guide_df['targeting'] == 'TRUE'].index
non_targeting_guides
nt_grna_presence = (mudata['guide'].layers['guide_assignment'][non_targeting_guides, :].max(axis=0) == 1)
mudata['guide'].layers['guide_assignment']
mudata['guide'].layers['guide_assignment'][non_targeting_guides, :]
non_targeting_guides
non_targeting_guides = guide_df[guide_df['targeting'] == 'FALSE'].index
non_targeting_guides
mudata['guide'].layers['guide_assignment']
