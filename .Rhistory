gasperini_dir <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/processed/")
gasperini_dir_raw <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/raw/")
gasperini_dir_intermediate <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/intermediate/")
# 0. set the Gasperini directory load the group, gene, and grna data
gasp_fp <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/processed/")
pairs_grouped <- readRDS(paste0(gasp_fp, "/pairs_grouped.rds")) |> dplyr::distinct()
covariate_info <- readRDS(paste0(gasperini_dir_intermediate, "/cell_covariates.rds")) |>
dplyr::rename(cell_id = cell) |>
dplyr::select(cell_id, prep_batch, within_batch_chip, within_chip_lane)
all_deg_results <- readr::read_tsv(paste0(gasperini_dir_raw, "/GSE120861_all_deg_results.at_scale.txt"))
gene_info <- all_deg_results |>
dplyr::select(ENSG, gene_short_name, target_gene.chr,
target_gene.start, target_gene.stop) |>
dplyr::group_by(ENSG) |>
dplyr::slice_head(n = 1) |>
dplyr::ungroup()
gene_odm_fp <- paste0(gasp_fp, "gene/matrix.odm")
gene_metadata_fp <- paste0(gasp_fp, "gene/metadata.rds")
gene_odm <- ondisc::read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
grna_odm_fp <- paste0(gasp_fp, "grna_expression/matrix.odm")
grna_metadata_fp <-  paste0(gasp_fp, "grna_expression/metadata.rds")
grna_odm <- ondisc::read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_feature_df <- grna_odm |>
ondisc::get_feature_covariates()
grna_feature_df <- grna_feature_df |>
dplyr::mutate(grna_id = rownames(grna_feature_df)) |>
`rownames<-`(NULL)
# 1. Construct the discovery pairs data frame, which contains both cis and positive control pairs
set.seed(6) # 4
my_cis_grna_groups <- c("chr8.847_top_two", "chr9.1594_top_two", "chr9.2869_top_two", "chr9.3633_top_two", "chr9.871_top_two")
cis_pairs <- pairs_grouped |>
dplyr::filter(grna_group %in% my_cis_grna_groups, gene_id %in% gene_table$response_id)
my_pc_grna_groups <- pairs_grouped |>
dplyr::filter(site_type == "pos_cntrl") |>
dplyr::pull(grna_group) |>
sample(10)
pc_pairs <- pairs_grouped |>
dplyr::filter(grna_group %in% my_pc_grna_groups, site_type == "pos_cntrl",
gene_id %in% gene_table$response_id)
targeting_pairs <- rbind(cis_pairs, pc_pairs) |>
dplyr::rename(type = site_type, response_id = gene_id)
# 2. sample some set of negative control pairs
nt_grnas <- grna_feature_df |>
dplyr::filter(target_type == "non-targeting") |>
dplyr::sample_n(25) |> dplyr::pull(grna_id)
# 3. construct the grna group table
grna_group_data_frame_highmoi <- rbind(grna_feature_df |>
dplyr::filter(grna_group %in% targeting_pairs$grna_group) |>
dplyr::select(grna_id, grna_group),
data.frame(grna_id = nt_grnas, grna_group = "non-targeting")) |>
dplyr::arrange(grna_group)
# 4. add chromosomal locations to the grna group table
grna_loc_info <- readr::read_tsv(file = paste0(gasperini_dir_raw, "/GSE120861_gene_gRNAgroup_pair_table.at_scale.txt"),
col_names = c("chr", "start", "end", "grna_group", "v1", "v2", "v3", "v4", "v5", "v6", "v7", "v8"),
skip = 1) |>
dplyr::select(chr, start, end, grna_group) |>
dplyr::distinct()
targeting_grna_grps <- grna_group_data_frame_highmoi |> dplyr::filter(grna_group != "non-targeting") |> dplyr::pull()
target_group_loc_info <- grna_loc_info |> dplyr::filter(grna_group %in% targeting_grna_grps) |>
dplyr::mutate(start = as.integer(start), end = as.integer(end))
grna_group_data_frame_highmoi <- dplyr::left_join(x = grna_group_data_frame_highmoi,
y = target_group_loc_info, by = c("grna_group"))
# 5. rename some of the grna groups
renamed_grna_group <- pc_pairs$gene_id[match(x = grna_group_data_frame_highmoi$grna_group, table = pc_pairs$grna_group)]
grna_group_data_frame_highmoi$grna_group[!is.na(renamed_grna_group)] <- renamed_grna_group[!is.na(renamed_grna_group)]
enh_group_idxs <- grep(pattern = "chr", x = grna_group_data_frame_highmoi$grna_group)
enh_groups <- grna_group_data_frame_highmoi$grna_group[enh_group_idxs]
grna_group_data_frame_highmoi$grna_group[enh_group_idxs] <- factor(x = enh_groups, levels = unique(enh_groups),
labels = paste0("candidate_enh_", seq_along(unique(enh_groups)))) |>
as.character()
# 6. reset the start and end positions
grna_group_data_frame_highmoi <- dplyr::group_by(grna_group_data_frame_highmoi, grna_group) |>
dplyr::group_modify(.f = function(tbl, key) {
if (!all(is.na(tbl$start))) {
group_start <- min(tbl$start)
group_end <- max(tbl$end)
if (group_end - group_start == 1L) group_end <- group_end + 30
posits <- as.integer(floor(seq(group_start, group_end, length.out = nrow(tbl) + 1)))
tbl$start <- posits[seq(1, nrow(tbl))]
tbl$end <- posits[seq(2, nrow(tbl) + 1)]
}
return(tbl)
}) |> dplyr::relocate(grna_id)
# 7. determine cells that contain at least one gRNA
my_grna_ids <- unique(grna_group_data_frame_highmoi$grna_id)
grna_matrix <- grna_odm[[my_grna_ids,]]
cell_ids <- which(apply(X = as.matrix(grna_matrix >= 5), 2, any))
length(cell_ids)
cell_ids <- which(apply(X = as.matrix(grna_matrix >= 5), 2, any)) |> sample(size = 10000)
# 8. construct the response and grna matrices; downsample cells
multimodal_odm <- ondisc::multimodal_ondisc_matrix(covariate_ondisc_matrix_list = list(grna = grna_odm, gene = gene_odm))
multimodal_odm_downsample <- multimodal_odm[,cell_ids]
multimodal_odm_downsample
# 9. get the gene matrix, adding a couple MT genes for good measure
gene_sub <- ondisc::get_modality(multimodal_odm_downsample, "gene")
all_gene_ids <- ondisc::get_feature_ids(gene_sub)
mt_genes <- gene_table |> dplyr::filter(chr == "chrM", response_id %in% all_gene_ids) |> dplyr::pull(response_id)
my_gene_ids <- c(unique(targeting_pairs$response_id), sample(mt_genes, 2))
gene_matrix <- gene_sub[[my_gene_ids,]]
rownames(gene_matrix) <- my_gene_ids
colnames(gene_matrix) <- gene_sub |> ondisc::get_cell_barcodes()
# 10. get the grna matrix
grna_sub <- ondisc::get_modality(multimodal_odm_downsample, "grna")
my_grna_ids <- unique(grna_group_data_frame_highmoi$grna_id)
grna_matrix <- grna_sub[[my_grna_ids,]]
rownames(grna_matrix) <- my_grna_ids
colnames(grna_matrix) <- grna_sub |> ondisc::get_cell_barcodes()
# 11. Compute the covariate matrix
covariate_matrix <- multimodal_odm_downsample |>
ondisc::get_cell_covariates() |>
dplyr::select(prep_batch = gene_batch) |>
tibble::rownames_to_column(var = "cell_id") |>
dplyr::left_join(covariate_info, by = c("cell_id", "prep_batch")) |>
tibble::column_to_rownames(var = "cell_id")
# 12. sort according to batch; also remove cells containing no gRNAs
cell_order <- order(covariate_matrix$prep_batch)
response_matrix_highmoi <- gene_matrix[,cell_order]
grna_matrix_highmoi <- grna_matrix[,cell_order]
covariate_data_frame_highmoi <- covariate_matrix[cell_order,,drop = FALSE]
# 13. rename the data objects
gene_info_subset <- dplyr::tibble(ENSG = rownames(response_matrix_highmoi)) |>
dplyr::left_join(dplyr::tibble(ENSG = rownames(response_matrix_highmoi)) |>
dplyr::left_join(gene_info, by = "ENSG"), by = "ENSG") |>
tibble::column_to_rownames(var = "ENSG") |>
dplyr::rename(symbol = gene_short_name,
gene_chr = target_gene.chr,
gene_start = target_gene.start,
gene_end = target_gene.stop)
grna_target_data_frame_highmoi <- grna_group_data_frame_highmoi |> dplyr::rename("grna_target" = "grna_group") |> as.data.frame()
sceptre_object_highmoi <- import_data(
response_matrix = response_matrix_highmoi,
grna_matrix = grna_matrix_highmoi,
grna_target_data_frame = grna_target_data_frame_highmoi,
moi = "high",
extra_covariates = covariate_data_frame_highmoi,
)
sceptre_object_highmoi
positive_control_pairs <- construct_positive_control_pairs(sceptre_object_highmoi)
discovery_pairs <- construct_cis_pairs(sceptre_object_highmoi,
positive_control_pairs = positive_control_pairs,
distance_threshold = 5e6
)
dim(positive_control_pairs)
dim(discovery_pairs)
# 2-4. set analysis parameters, assign gRNAs, run qc
sceptre_object_highmoi <- sceptre_object_highmoi |>
set_analysis_parameters(
discovery_pairs = discovery_pairs,
positive_control_pairs = positive_control_pairs,
side = "left"
) |>
assign_grnas(method = "thresholding", threshold = 1, parallel = TRUE) |>
run_qc(p_mito_threshold = 0.075) |>
run_power_check(parallel = TRUE) |>
run_discovery_analysis(parallel = TRUE)
sceptre_object_highmoi
sceptre_object_highmoi |> print()
sceptre_object <- sceptre_object_highmoi
# 1. Extract objects and subset to the set of cells in use
cells_in_use <- sceptre_object@cells_in_use
if(length(cells_in_use) == 0){
cells_in_use <- 1:ncol(sceptre_object@response_matrix)
}
response_matrix <- sceptre_object@response_matrix[, cells_in_use]
grna_matrix <- sceptre_object@grna_matrix[, cells_in_use]
grna_assignment_matrix <- extract_grna_assignment_matrix(sceptre_object)
if(!is.null(grna_assignment_matrix)){
grna_assignment_matrix <- grna_assignment_matrix[, cells_in_use]
}
covariate_df <- sceptre_object@covariate_data_frame[cells_in_use, ]
grna_target_data_frame <- sceptre_object@grna_target_data_frame
positive_control_pairs <- sceptre_object@positive_control_pairs
discovery_pairs <- sceptre_object@discovery_pairs
moi <- if(sceptre_object@low_moi) "low" else "high"
gene_names <- sceptre_object@response_names
# 2. Extract batch info, if present
sample_df <- covariate_df |>
dplyr::select(-grna_n_nonzero, -grna_n_umis, -response_n_nonzero, -response_n_umis)
# 3. Extra gRNA and gene information
grna_ids <- rownames(grna_matrix)
grna_rowdata <- grna_target_data_frame |>
dplyr::arrange(match(grna_id, grna_ids)) |>
tibble::column_to_rownames(var = "grna_id") |>
dplyr::mutate(targeting = ifelse(grna_target != "non-targeting", "TRUE", "FALSE")) |>
dplyr::relocate(targeting) |>
dplyr::rename(intended_target_name = grna_target)
if("chr" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(chr = ifelse(is.na(chr), "", chr)) |>
dplyr::rename(intended_target_chr = chr)
}
if("start" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(start = ifelse(is.na(start), -9, start)) |>
dplyr::rename(intended_target_start = start)
}
if("end" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(end = ifelse(is.na(end), -9, end)) |>
dplyr::rename(intended_target_end = end)
}
if("grna_group" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::select(-grna_group)
}
grna_coldata <- covariate_df |>
dplyr::select(grna_n_nonzero, grna_n_umis) |>
dplyr::rename(num_expressed_grnas = grna_n_nonzero, total_grna_umis = grna_n_umis)
gene_coldata <- covariate_df |>
dplyr::select(response_n_nonzero, response_n_umis) |>
dplyr::rename(num_expressed_genes = response_n_nonzero, total_gene_umis = response_n_umis)
# 4. Prepare for conversion to MuData
response_matrix <- methods::as(response_matrix, "CsparseMatrix")
grna_matrix <- methods::as(grna_matrix, "CsparseMatrix")
if(is.null(colnames(response_matrix))){
cell_ids <- paste0("cell_", 1:ncol(response_matrix))
} else{
cell_ids <- colnames(response_matrix)
}
colnames(response_matrix) <- cell_ids
colnames(grna_matrix) <- cell_ids
rownames(sample_df) <- cell_ids
if(!is.null(grna_assignment_matrix)){
colnames(grna_assignment_matrix) <- cell_ids
}
pairs <- rbind(
positive_control_pairs |> dplyr::mutate(pair_type = "positive_control"),
discovery_pairs |> dplyr::mutate(pair_type = "discovery")
)
pairs |>
dplyr::select(grna_target, response_id, pair_type) |>
dplyr::rename(gene_id = response_id) |>
MultiAssayExperiment::DataFrame() |> head()
pairs |>
dplyr::select(grna_target, response_id, pair_type) |>
dplyr::rename(intended_target_name = grna_target, gene_id = response_id) |>
MultiAssayExperiment::DataFrame()
metadata[["pairs_to_test"]] = pairs |>
dplyr::select(grna_target, response_id, pair_type) |>
dplyr::rename(intended_target_name = grna_target, gene_id = response_id) |>
MultiAssayExperiment::DataFrame()
metadata <- list(moi = moi)
if(nrow(pairs) > 0){
metadata[["pairs_to_test"]] = pairs |>
dplyr::select(grna_target, response_id, pair_type) |>
dplyr::rename(intended_target_name = grna_target, gene_id = response_id) |>
MultiAssayExperiment::DataFrame()
}
sceptre_object@positive_control_pairs_with_info
sceptre_object@power_result
pairs |>
dplyr::left_join(sceptre_object@power_result, by = c("grna_target", "response_id"))
pairs |>
dplyr::left_join(sceptre_object@power_result, by = c("grna_target", "response_id")) |> head()
rbind(sceptre_object@power_result, sceptre_object@discovery_result)
sceptre_object@power_result |> names()
sceptre_object@discovery_result |> names()
test_results <- rbind(sceptre_object@power_result |>
dplyr::select(response_id, grna_target, p_value, log_2_fold_change),
sceptre_object@discovery_result |>
dplyr::select(response_id, grna_target, p_value, log_2_fold_change)
)
test_results
rbind(sceptre_object@power_result |>
dplyr::select(response_id, grna_target, p_value, log_2_fold_change),
sceptre_object@discovery_result |>
dplyr::select(response_id, grna_target, p_value, log_2_fold_change)
) |>
dplyr::rename(intended_target_name = grna_target, gene_id = response_id) |>
MultiAssayExperiment::DataFrame()
sceptre_object@discovery_result
sceptre_object@discovery_result |> dplyr::count(pass_qc)
sum(is.na(test_results$p_value))
# 5. Create MuData object
gene_se <- SummarizedExperiment::SummarizedExperiment(
assays = list(counts = response_matrix),
colData = gene_coldata,
)
grna_assays <- list(counts = grna_matrix)
if (!is.null(grna_assignment_matrix)) {
grna_assays[["grna_assignments"]] <- grna_assignment_matrix
}
grna_se <- SummarizedExperiment::SummarizedExperiment(
assays = grna_assays,
rowData = grna_rowdata,
colData = grna_coldata
)
mae <- MultiAssayExperiment::MultiAssayExperiment(
experiments = list(gene = gene_se, guide = grna_se),
colData = sample_df,
metadata = metadata
)
devtools::load_all("~/code/research/sceptreIGVF/")
mae_highmoi <- sceptre_object_to_mudata(sceptre_object_highmoi)
mae_highmoi
mae_highmoi |> metadata
metadata(mae_highmoi)
rbind(sceptre_object@power_result |>
dplyr::select(response_id, grna_target, p_value, log_2_fold_change) |>
dplyr::mutate(pair_type = "positive_control")
sceptre_object@discovery_result |>
rbind(sceptre_object@power_result |>
dplyr::select(response_id, grna_target, p_value, log_2_fold_change) |>
dplyr::mutate(pair_type = "positive_control"),
sceptre_object@discovery_result |>
dplyr::select(response_id, grna_target, p_value, log_2_fold_change) |>
dplyr::mutate(pair_type = "discovery")
) |>
dplyr::rename(intended_target_name = grna_target, gene_id = response_id) |>
MultiAssayExperiment::DataFrame()
pairs
rbind(sceptre_object@power_result |>
dplyr::select(grna_target, response_id, p_value, log_2_fold_change) |>
dplyr::mutate(pair_type = "positive_control") |>
dplyr::relocate(pair_type, .after = response_id),
sceptre_object@discovery_result |>
dplyr::select(response_id, grna_target, p_value, log_2_fold_change) |>
dplyr::mutate(pair_type = "discovery") |>
dplyr::relocate(pair_type, .after = response_id)
) |>
dplyr::rename(intended_target_name = grna_target, gene_id = response_id) |>
MultiAssayExperiment::DataFrame()
pairs |> dplyr::left_join(sceptre_object@power_result |> dplyr::select(grna_target, response_id, p_value, log_2_fold_change) |> dplyr::left_join(sceptre_object@discovery_result |> dplyr::select(grna_target, response_id, p_value, log_2_fold_change)
)
pairs |> dplyr::left_join(sceptre_object@power_result |> dplyr::select(grna_target, response_id, p_value, log_2_fold_change)) |> dplyr::left_join(sceptre_object@discovery_result |> dplyr::select(grna_target, response_id, p_value, log_2_fold_change))
pairs |> dplyr::left_join(sceptre_object@power_result |> dplyr::select(grna_target, response_id, p_value, log_2_fold_change), by = c("grna_target", "response_id")) |> dplyr::left_join(sceptre_object@discovery_result |> dplyr::select(grna_target, response_id, p_value, log_2_fold_change),  by = c("grna_target", "response_id"))
pairs |>
dplyr::select(grna_target, response_id, pair_type) |>
left_join(rbind(sceptre_object@power_result |>
dplyr::select(grna_target, response_id, p_value, log_2_fold_change),
sceptre_object@discovery_result |>
dplyr::select(response_id, grna_target, p_value, log_2_fold_change), by = c("grna_target", "response_id"))
pairs |>
dplyr::select(grna_target, response_id, pair_type) |>
left_join(rbind(sceptre_object@power_result |>
dplyr::select(grna_target, response_id, p_value, log_2_fold_change),
sceptre_object@discovery_result |>
dplyr::select(response_id, grna_target, p_value, log_2_fold_change)),
by = c("grna_target", "response_id"))
pairs |>
dplyr::select(grna_target, response_id, pair_type) |>
dplyr::left_join(rbind(sceptre_object@power_result |>
dplyr::select(grna_target, response_id, p_value, log_2_fold_change),
sceptre_object@discovery_result |>
dplyr::select(response_id, grna_target, p_value, log_2_fold_change)),
by = c("grna_target", "response_id"))
metadata[["test_results"]] <- pairs |>
dplyr::select(grna_target, response_id, pair_type) |>
dplyr::left_join(rbind(sceptre_object@power_result |>
dplyr::select(grna_target, response_id, p_value, log_2_fold_change),
sceptre_object@discovery_result |>
dplyr::select(response_id, grna_target, p_value, log_2_fold_change)),
by = c("grna_target", "response_id")) |>
dplyr::rename(intended_target_name = grna_target, gene_id = response_id) |>
MultiAssayExperiment::DataFrame()
devtools::load_all("~/code/research/sceptreIGVF/")
mae_highmoi <- sceptre_object_to_mudata(sceptre_object_highmoi)
mae_highmoi
mae_highmoi |> metadata()
devtools::load_all("~/code/research/sceptreIGVF/")
mae_highmoi <- sceptre_object_to_mudata(sceptre_object_highmoi)
mae_highmoi |> metadata()
rowData(mae_highmoi[["gene"]]) <- gene_info_subset
writeH5MU(mae_highmoi, "data/gasperini_subset.h5mu")
mae_highmoi_final <- sceptre_object_to_mudata(sceptre_object_highmoi)
rowData(mae_highmoi_final[["gene"]]) <- gene_info_subset
writeH5MU(mae_highmoi_final, "data/gasperini_final.h5mu")
mae_highmoi_final
mae_highmoi_inference_output <- sceptre_object_to_mudata(sceptre_object_highmoi)
rowData(mae_highmoi_inference_output[["gene"]]) <- gene_info_subset
metadata(mae_highmoi_inference_input)$test_results <- NULL
mae_highmoi_inference_input <- mae_highmoi_inference_output
metadata(mae_highmoi_inference_input)$test_results <- NULL
metadata(mae_highmoi_inference_input)
metadata(mae_highmoi_grna_assignment_output)$pairs_to_test <- NULL
mae_highmoi_grna_assignment_output <- mae_highmoi_inference_input
metadata(mae_highmoi_grna_assignment_output)$pairs_to_test <- NULL
metadata(mae_highmoi_grna_assignment_output)
mae_highmoi_grna_assignment_input <- mae_highmoi_grna_assignment_output
mae_highmoi_grna_assignment_input
mae_highmoi_grna_assignment_input['guide']
mae_highmoi_grna_assignment_input[['guide']]
mae_highmoi_grna_assignment_input[['guide']] |> assays()
assays(mae_highmoi_grna_assignment_input[['guide']])$grna_assignments <- NULL
mae_highmoi_grna_assignment_output
mae_highmoi_grna_assignment_output[['guide']]
assays(mae_highmoi_grna_assignment_input[['guide']])$grna_assignments
mae_highmoi_grna_assignment_input[['guide']] <- mae_highmoi_grna_assignment_input[['guide']]['counts']
mae_highmoi_grna_assignment_input[['guide']]
mae_highmoi_grna_assignment_input <- mae_highmoi_grna_assignment_output
mae_highmoi_grna_assignment_input[['guide']] <- mae_highmoi_grna_assignment_input[['guide']]['counts']
mae_highmoi_grna_assignment_input[['guide']]
mae_highmoi_grna_assignment_input[['guide']]['counts']
mae_highmoi_grna_assignment_input[['guide']][['counts']]
assays(mae_highmoi_grna_assignment_input[['guide']])
assays(mae_highmoi_grna_assignment_input[['guide']])[['counts']]
assays(mae_highmoi_grna_assignment_input[['guide']]) <- assays(mae_highmoi_grna_assignment_input[['guide']])[['counts']]
assayNames(mae_highmoi_grna_assignment_input[['guide']])
assays_list <- assays(mae_highmoi_grna_assignment_input[['guide']])
assays_list
assays_list$grna_assignments <- NULL
assays(mae_highmoi_grna_assignment_input[['guide']]) <- assays_list
mae_highmoi_grna_assignment_input[['guide']]
mae_highmoi_grna_assignment_input <- mae_highmoi_grna_assignment_output
guide_assays_list <- assays(mae_highmoi_grna_assignment_input[['guide']])
guide_assays_list$grna_assignments <- NULL
assays(mae_highmoi_grna_assignment_input[['guide']]) <- guide_assays_list
writeH5MU(mae_highmoi_inference_output, "data/gasperini_inference_output.h5mu")
writeH5MU(mae_highmoi_inference_input, "data/gasperini_inference_input.h5mu")
writeH5MU(mae_highmoi_grna_assignment_output, "data/gasperini_grna_assignment_output.h5mu")
writeH5MU(mae_highmoi_grna_assignment_input, "data/gasperini_grna_assignment_input.h5mu")
reticulate::repl_python()
mae_highmoi_inference_output_minimal <- mae_highmoi_inference_output
colData(mae_highmoi_inference_output_minimal)
colData(mae_highmoi_inference_output_minimal) <- NULL
colData(mae_highmoi_inference_output_minimal) <- colData(mae_highmoi_inference_output_minimal) |>
dplyr::select(-c(prep_batch, within_batch_chip, within_chip_lane))
?DataFrame
MultiAssayExperiment::DataFrame(
row.names = rowNames(colData(mae_highmoi_inference_output_minimal))
)
MultiAssayExperiment::DataFrame(
row.names = rownames(colData(mae_highmoi_inference_output_minimal))
)
colData(mae_highmoi_inference_output_minimal) <- MultiAssayExperiment::DataFrame(
row.names = rownames(colData(mae_highmoi_inference_output_minimal))
)
reticulate::repl_python()
mae_highmoi_inference_output_minimal[['gene']]
rowData(mae_highmoi_inference_output_minimal[['gene']]) <- NULL
colData(mae_highmoi_inference_output_minimal[['gene']]) <- NULL
colData(mae_highmoi_inference_output_minimal[['guide']])
rowData(mae_highmoi_inference_output_minimal[['guide']])
rowData(mae_highmoi_inference_output_minimal[['guide']]) <- rowData(mae_highmoi_inference_output_minimal[['guide']])[,c("targeting", "intended_target_name")]
metadata(rowData(mae_highmoi_inference_output_minimal[['guide']]) <- rowData(mae_highmoi_inference_output_minimal[['guide']])[,c("targeting", "intended_target_name")]
)
metadata(rowData(mae_highmoi_inference_output_minimal)
metadata(mae_highmoi_inference_output_minimal)
metadata(mae_highmoi_inference_output_minimal)$pairs_to_test <-
metadata(mae_highmoi_inference_output_minimal)$pairs_to_test[,-c("pair_type")]
metadata(mae_highmoi_inference_output_minimal)$pairs_to_test <-
metadata(mae_highmoi_inference_output_minimal)$pairs_to_test[,-"pair_type"]
metadata(mae_highmoi_inference_output_minimal)$pairs_to_test
metadata(mae_highmoi_inference_output_minimal)$pairs_to_test <-
metadata(mae_highmoi_inference_output_minimal)$pairs_to_test[,c("intended_target_name", "gene_id")]
metadata(mae_highmoi_inference_output_minimal)$test_results <-
metadata(mae_highmoi_inference_output_minimal)$test_results[,c("intended_target_name", "gene_id", "p_value")]
mae_highmoi_inference_input_minimal <- mae_highmoi_inference_output_minimal
metadata(mae_highmoi_inference_input_minimal)$test_results <- NULL
mae_highmoi_grna_assignment_output_minimal <- mae_highmoi_inference_input_minimal
metadata(mae_highmoi_grna_assignment_output_minimal)$pairs_to_test <- NULL
mae_highmoi_grna_assignment_input_minimal <- mae_highmoi_grna_assignment_output_minimal
guide_assays_list <- assays(mae_highmoi_grna_assignment_input_minimal[['guide']])
guide_assays_list$grna_assignments <- NULL
assays(mae_highmoi_grna_assignment_input_minimal[['guide']]) <- guide_assays_list
writeH5MU(mae_highmoi_inference_output_minimal, "data/gasperini_inference_output_minimal.h5mu")
writeH5MU(mae_highmoi_inference_input_minimal, "data/gasperini_inference_input_minimal.h5mu")
writeH5MU(mae_highmoi_grna_assignment_output_minimal, "data/gasperini_grna_assignment_output_minimal.h5mu")
writeH5MU(mae_highmoi_grna_assignment_input_minimal, "data/gasperini_grna_assignment_input_minimal.h5mu")
reticulate::repl_python()
mae_highmoi_inference_output_minimal
mae_highmoi_inference_output_minimal[['guide']]
colData(mae_highmoi_inference_output_minimal) <- MultiAssayExperiment::DataFrame(
row.names = rownames(colData(mae_highmoi_inference_output_minimal))
)
rowData(mae_highmoi_inference_output_minimal[['gene']]) <- NULL
colData(mae_highmoi_inference_output_minimal[['gene']]) <- NULL
rowData(mae_highmoi_inference_output_minimal[['guide']]) <-
rowData(mae_highmoi_inference_output_minimal[['guide']])[,c("targeting", "intended_target_name")]
colData(mae_highmoi_inference_output_minimal[['guide']]) <- NULL
metadata(mae_highmoi_inference_output_minimal)$pairs_to_test <-
metadata(mae_highmoi_inference_output_minimal)$pairs_to_test[,c("intended_target_name", "gene_id")]
metadata(mae_highmoi_inference_output_minimal)$test_results <-
metadata(mae_highmoi_inference_output_minimal)$test_results[,c("intended_target_name", "gene_id", "p_value")]
mae_highmoi_inference_output_minimal
mae_highmoi_inference_output_minimal['guide']
mae_highmoi_inference_output_minimal[['guide']]
mae_highmoi_inference_output_minimal <- mae_highmoi_inference_output
colData(mae_highmoi_inference_output_minimal) <- MultiAssayExperiment::DataFrame(
row.names = rownames(colData(mae_highmoi_inference_output_minimal))
)
rowData(mae_highmoi_inference_output_minimal[['gene']]) <- NULL
colData(mae_highmoi_inference_output_minimal[['gene']]) <- NULL
rowData(mae_highmoi_inference_output_minimal[['guide']]) <-
rowData(mae_highmoi_inference_output_minimal[['guide']])[,c("targeting", "intended_target_name")]
colData(mae_highmoi_inference_output_minimal[['guide']]) <- NULL
metadata(mae_highmoi_inference_output_minimal)$pairs_to_test <-
metadata(mae_highmoi_inference_output_minimal)$pairs_to_test[,c("intended_target_name", "gene_id")]
metadata(mae_highmoi_inference_output_minimal)$test_results <-
metadata(mae_highmoi_inference_output_minimal)$test_results[,c("intended_target_name", "gene_id", "p_value")]
mae_highmoi_inference_input_minimal <- mae_highmoi_inference_output_minimal
metadata(mae_highmoi_inference_input_minimal)$test_results <- NULL
mae_highmoi_grna_assignment_output_minimal <- mae_highmoi_inference_input_minimal
metadata(mae_highmoi_grna_assignment_output_minimal)$pairs_to_test <- NULL
mae_highmoi_grna_assignment_input_minimal <- mae_highmoi_grna_assignment_output_minimal
guide_assays_list <- assays(mae_highmoi_grna_assignment_input_minimal[['guide']])
guide_assays_list$grna_assignments <- NULL
assays(mae_highmoi_grna_assignment_input_minimal[['guide']]) <- guide_assays_list
writeH5MU(mae_highmoi_inference_output_minimal, "data/gasperini_inference_output_minimal.h5mu")
writeH5MU(mae_highmoi_inference_input_minimal, "data/gasperini_inference_input_minimal.h5mu")
writeH5MU(mae_highmoi_grna_assignment_output_minimal, "data/gasperini_grna_assignment_output_minimal.h5mu")
writeH5MU(mae_highmoi_grna_assignment_input_minimal, "data/gasperini_grna_assignment_input_minimal.h5mu")
reticulate::repl_python()
mae_highmoi_inference_output_minimal['guide']
mae_highmoi_inference_output_minimal['guide'] |> rowData()
mae_highmoi_inference_output_minimal[['guide']] |> rowData()
mae_highmoi_inference_output_minimal[['guide']] |> colData()
reticulate::repl_python()
renv::status()
renv::snapshot()
source("create-gasperini-subsample.R")
reticulate::repl_python()
