import mudata as md
import pandas as pd
pd.set_option('display.max_columns', None)
grna_assignment_input = md.read_h5mu("data/gasperini_grna_assignment_input_minimal.h5mu")
grna_assignment_input
grna_assignment_input['guide'].var.iloc[[0, 1, 2, 3, 100, 101]]
import mudata as md
import pandas as pd
grna_assignment_input = md.read_h5mu("data/papalexi_grna_assignment_input_minimal.h5mu")
grna_assignment_input = md.read_h5mu("data/papalexi_grna_assignment_input.h5mu")
grna_assignment_input['guide'].var.iloc[[0, 1, 2, 3, 100, 101]]
grna_assignment_input['guide'].var
grna_assignment_input['guide'].var.iloc[[0, 1, 50, 51]]
grna_assignment_input['guide'].var.iloc[[0, 1, 55, 56]]
grna_assignment_input['guide'].var.iloc[[0, 1, 57, 58, 59]]
import mudata as md
def validate_grna_assignment_input(file_path_or_object):
# Load the .h5mu file
if isinstance(file_path_or_object, str):
mu_data = md.read_h5mu(file_path_or_object)
else:
mu_data = file_path_or_object
# Initialize validation result
valid = True
messages = []
# Check for the presence of 'gene' and 'guide' modalities
if 'gene' not in mu_data.mod or 'guide' not in mu_data.mod:
valid = False
missing_modalities = [mod for mod in ['gene', 'guide'] if mod not in mu_data.mod]
messages.append(f"Missing required modalities: {', '.join(missing_modalities)}.")
# Validate 'gene' modality
if 'gene' in mu_data.mod:
if 'X' not in mu_data.mod['gene']:
valid = False
messages.append("'gene' modality must contain a .X matrix.")
# Validate 'guide' modality
if 'guide' in mu_data.mod:
if 'X' not in mu_data.mod['guide']:
valid = False
messages.append("'guide' modality must contain a .X matrix.")
if 'var' not in mu_data.mod['guide'] or not all(field in mu_data.mod['guide'].var for field in ['targeting', 'intended_target_name']):
valid = False
messages.append("'guide' modality must contain a .var DataFrame with 'targeting' and 'intended_target_name' fields.")
# Return the validation result
return valid, "; ".join(messages)
quite
def validate_grna_assignment_input(file_path_or_object):
# Load the .h5mu file
if isinstance(file_path_or_object, str):
mu_data = md.read_h5mu(file_path_or_object)
else:
mu_data = file_path_or_object
# Initialize validation result
valid = True
messages = []
# Check for the presence of 'gene' and 'guide' modalities
if 'gene' not in mu_data.mod or 'guide' not in mu_data.mod:
valid = False
missing_modalities = [mod for mod in ['gene', 'guide'] if mod not in mu_data.mod]
messages.append(f"Missing required modalities: {', '.join(missing_modalities)}.")
# Validate 'gene' modality
if 'gene' in mu_data.mod:
if 'X' not in mu_data.mod['gene']:
valid = False
messages.append("'gene' modality must contain a .X matrix.")
# Validate 'guide' modality
if 'guide' in mu_data.mod:
if 'X' not in mu_data.mod['guide']:
valid = False
messages.append("'guide' modality must contain a .X matrix.")
if 'var' not in mu_data.mod['guide'] or not all(field in mu_data.mod['guide'].var for field in ['targeting', 'intended_target_name']):
valid = False
messages.append("'guide' modality must contain a .var DataFrame with 'targeting' and 'intended_target_name' fields.")
# Return the validation result
return valid, "; ".join(messages)
q
import validate-mudata.py
validate_grna_assignment_input("data/papalexi_grna_assignment_input_minimal.h5mu")
valid, message = validate_grna_assignment_input("data/papalexi_grna_assignment_input_minimal.h5mu")
print(valid)
valid
message
file_path_or_object = "data/papalexi_grna_assignment_input_minimal.h5mu"
if isinstance(file_path_or_object, str):
mu_data = md.read_h5mu(file_path_or_object)
else:
mu_data = file_path_or_object
mu_data
isinstance(file_path_or_object, str)
if isinstance(file_path_or_object, str):
mu_data = md.read_h5mu(file_path_or_object)
else:
mu_data = file_path_or_object
mu_data
mu_data = md.read_h5mu(file_path_or_object)
mu_data
reticulate::repl_python()
