tibble::column_to_rownames(var = "grna_id")
if("chr" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(chr = ifelse(is.na(chr), "", chr))
dplyr::rename(chromosome = chr)
}
"chr" %in% colnames(grna_rowdata)
grna_rowdata <- grna_rowdata |>
dplyr::mutate(chr = ifelse(is.na(chr), "", chr))
if("chr" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(chr = ifelse(is.na(chr), "", chr)) |>
dplyr::rename(chromosome = chr)
}
if("start" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(start = ifelse(is.na(start), -9, start))
}
if("end" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(end = ifelse(is.na(end), -9, end))
}
if(sum(!is.na(gene_names)) > 0){
gene_rowdata <- data.frame(symbol = gene_names)
} else{
gene_rowdata <- NULL
}
# 4. Prepare for conversion to MuData
response_matrix <- methods::as(response_matrix, "CsparseMatrix")
grna_matrix <- methods::as(grna_matrix, "CsparseMatrix")
if(is.null(colnames(response_matrix))){
cell_ids <- paste0("cell_", 1:ncol(response_matrix))
} else{
cell_ids <- colnames(response_matrix)
}
colnames(response_matrix) <- cell_ids
colnames(grna_matrix) <- cell_ids
rownames(sample_df) <- cell_ids
pairs <- rbind(
positive_control_pairs |> dplyr::mutate(pair_type = "positive_control"),
discovery_pairs |> dplyr::mutate(pair_type = "discovery")
)
metadata <- list(moi = moi)
if(nrow(pairs) > 0){
metadata[["inference_results"]] = rbind(
positive_control_pairs |> dplyr::mutate(pair_type = "positive_control"),
discovery_pairs |> dplyr::mutate(pair_type = "discovery")
) |>
dplyr::select(grna_target, response_id, pair_type) |>
dplyr::rename(gene_id = response_id) |>
dplyr::mutate(p_value = -9, log_2_fold_change = -9)
}
# 5. Create MuData object
gene_se <- SummarizedExperiment::SummarizedExperiment(assays = list(counts = response_matrix, rowData = gene_rowdata))
dim(response_matrix)
dim(gene_rowdata)
grna_se <- SummarizedExperiment::SummarizedExperiment(assays = list(counts = grna_matrix), rowData = grna_rowdata)
dim(grna_matrix)
dim(grna_rowdata)
# 5. Create MuData object
gene_se <- SummarizedExperiment::SummarizedExperiment(assays = list(counts = response_matrix), rowData = gene_rowdata)
grna_se <- SummarizedExperiment::SummarizedExperiment(assays = list(counts = grna_matrix), rowData = grna_rowdata)
if(!is.null(grna_assignment_matrix)){
grna_assignment_se <- SummarizedExperiment::SummarizedExperiment(assays = list(counts = grna_assignment_matrix))
} else{
grna_assignment_se <- NULL
}
experiment_list <- list(gene = gene_se, grna = grna_se)
if(!is.null(grna_assignment_se)){
experiment_list[["grna_assignment"]] <- grna_assignment_se
}
mae <- MultiAssayExperiment::MultiAssayExperiment(
experiments = experiment_list,
colData = sample_df,
metadata = metadata
)
getwd()
source("create-sample-mudata.R")
source("create-sample-mudata.R")
reticulate::repl_python()
source("create-sample-mudata.R")
getwd()
devtools::install("~/code/research/sceptreIGVF/")
source("create-sample-mudata.R")
reticulate::repl_python()
sceptre_object_to_mudata
library(sceptreIGVF)
rm(sceptre_object_to_mudata)
rm(extract_grna_assignment_matrix)
sceptre_object_to_mudata
print("Creating MuData for Gasperini subset...")
cat("Creating MuData for Gasperini subset...")
cat("Creating MuData for Gasperini subset...")
cat("Creating MuData for Gasperini subset...")
source("create-sample-mudata.R")
sceptre_object_to_mudata
source("create-sample-mudata.R")
reticulate::repl_python()
rbind(
positive_control_pairs |> dplyr::mutate(pair_type = "positive_control"),
discovery_pairs |> dplyr::mutate(pair_type = "discovery")
) |>
dplyr::select(grna_target, response_id, pair_type) |>
dplyr::rename(gene_id = response_id) |>
dplyr::mutate(p_value = -9, log_2_fold_change = -9)
rbind(
positive_control_pairs |> dplyr::mutate(pair_type = "positive_control"),
discovery_pairs |> dplyr::mutate(pair_type = "discovery")
) |>
dplyr::select(grna_target, response_id, pair_type) |>
dplyr::rename(gene_id = response_id) |>
dplyr::mutate(p_value = -9, log_2_fold_change = -9) |> class()
rbind(
positive_control_pairs |> dplyr::mutate(pair_type = "positive_control"),
discovery_pairs |> dplyr::mutate(pair_type = "discovery")
) |>
dplyr::select(grna_target, response_id, pair_type) |>
dplyr::rename(gene_id = response_id) |>
dplyr::mutate(p_value = -9, log_2_fold_change = -9) |> DataFrame()
?DataFrame
devtools::install("~/code/research/sceptreIGVF/")
library(sceptreIGVF)
sceptre_object_to_mudata
moi
devtools::install("~/code/research/sceptreIGVF/")
renv::status()
renv::snapshot()
renv::status()
getwd()
source("create-sample-mudata.R")
reticulate::repl_python()
styler:::style_selection()
styler:::style_selection()
devtools::install("~/code/research/sceptreIGVF/")
devtools::install("~/code/research/sceptreIGVF/")
reticulate::repl_python()
reticulate::repl_python()
grna_target_data_frame
sceptre_object_highmoi@grna_target_data_frame |> head()
sceptre_object_highmoi@grna_target_data_frame |> dplyr::mutate(targeting = grna_target == "non-targeting") |> as_tibble()
sceptre_object_highmoi@grna_target_data_frame |> dplyr::mutate(targeting = grna_target == "non-targeting") |> tibble::as_tibble()
sceptre_object_highmoi@grna_target_data_frame |> dplyr::mutate(targeting = grna_target != "non-targeting") |> tibble::as_tibble()
sceptre_object_highmoi@grna_target_data_frame |> dplyr::mutate(targeting = grna_target != "non-targeting") |> tibble::as_tibble() |> dplyr::summarize(mean(targeting))
dir <- "~/data/external/gasperini-2019-v2/raw"
out <- readr::read_tsv(paste0(dir, "/all_libraries.gRNAcaptured.aggregated.txt"), n_max = 10)
dir <- "~/data/external/gasperini-2019-v2/at-scale/raw"
out <- readr::read_tsv(paste0(dir, "/all_libraries.gRNAcaptured.aggregated.txt"), n_max = 10)
out
renv::deactivate()
library(ondisc)
gasperini_dir <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/processed/")
gasperini_dir_raw <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/raw/")
# 0. set the Gasperini directory load the group, gene, and grna data
gasp_fp <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/processed/")
pairs_grouped <- readRDS(paste0(gasp_fp, "/pairs_grouped.rds")) |> dplyr::distinct()
gasp_fp
gene_odm_fp <- paste0(gasp_fp, "gene/matrix.odm")
gene_metadata_fp <- paste0(gasp_fp, "gene/metadata.rds")
gene_odm <- ondisc::read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
grna_odm_fp <- paste0(gasp_fp, "grna_expression/matrix.odm")
grna_metadata_fp <-  paste0(gasp_fp, "grna_expression/metadata.rds")
grna_odm <- ondisc::read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_feature_df <- grna_odm |>
ondisc::get_feature_covariates()
grna_feature_df |> head()
sceptre_object_highmoi@grna_target_data_frame |> dplyr::mutate(targeting = grna_target != "non-targeting") |> tibble::as_tibble()
sceptre_object <- sceptre_object_highmoi
# 1. Extract objects and subset to the set of cells in use
cells_in_use <- sceptre_object@cells_in_use
if(length(cells_in_use) == 0){
cells_in_use <- 1:ncol(sceptre_object@response_matrix)
}
response_matrix <- sceptre_object@response_matrix[, cells_in_use]
grna_matrix <- sceptre_object@grna_matrix[, cells_in_use]
grna_assignment_matrix <- extract_grna_assignment_matrix(sceptre_object)
if(!is.null(grna_assignment_matrix)){
grna_assignment_matrix <- grna_assignment_matrix[, cells_in_use]
}
devtools::load_all("~/code/research/sceptreIGVF")
# 1. Extract objects and subset to the set of cells in use
cells_in_use <- sceptre_object@cells_in_use
if(length(cells_in_use) == 0){
cells_in_use <- 1:ncol(sceptre_object@response_matrix)
}
response_matrix <- sceptre_object@response_matrix[, cells_in_use]
grna_matrix <- sceptre_object@grna_matrix[, cells_in_use]
grna_assignment_matrix <- extract_grna_assignment_matrix(sceptre_object)
if(!is.null(grna_assignment_matrix)){
grna_assignment_matrix <- grna_assignment_matrix[, cells_in_use]
}
covariate_df <- sceptre_object@covariate_data_frame[cells_in_use, ]
grna_target_data_frame <- sceptre_object@grna_target_data_frame
positive_control_pairs <- sceptre_object@positive_control_pairs
discovery_pairs <- sceptre_object@discovery_pairs
moi <- if(sceptre_object@low_moi) "low" else "high"
gene_names <- sceptre_object@response_names
# 2. Extract batch info, if present
batch_cols <- grep("rep|batch", names(covariate_df), ignore.case = TRUE)
# Check the number of matching columns and act accordingly
if (length(batch_cols) == 0) {
# No matching columns, create a DataFrame with all ones
sample_df <- MultiAssayExperiment::DataFrame(batch = rep(1, nrow(covariate_df)))
} else if (length(batch_cols) == 1) {
# One matching column, create a DataFrame with its contents
sample_df <- MultiAssayExperiment::DataFrame(batch = covariate_df[[batch_cols]])
} else {
# More than one matching column, throw an error
stop("Error: More than one column found containing 'rep' or 'batch'")
}
# 3. Extra gRNA and gene information
grna_ids <- rownames(grna_matrix)
grna_rowdata <- grna_target_data_frame |>
dplyr::arrange(match(grna_id, grna_ids)) |>
tibble::column_to_rownames(var = "grna_id") |>
dplyr::mutate(targeting = grna_target != "non-targeting") |>
dplyr::relocate(targeting)
grna_rowdata |> head()
if("chr" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(chr = ifelse(is.na(chr), "", chr)) |>
dplyr::rename(guide_chr = chr)
}
if("start" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(start = ifelse(is.na(start), -9, start)) |>
dplyr::rename(guide_start = start)
}
if("end" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(end = ifelse(is.na(end), -9, end)) |>
dplyr::rename(guide_end = end)
}
if("grna_group" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::select(-grna_group)
}
grna_rowdata |> head()
grna_rowdata |> tail()
grna_rowdata <- grna_target_data_frame |>
dplyr::arrange(match(grna_id, grna_ids)) |>
tibble::column_to_rownames(var = "grna_id") |>
dplyr::mutate(targeting = grna_target != "non-targeting") |>
dplyr::relocate(targeting) |>
dplyr::rename(guide_target = grna_target)
grna_rowdata <- grna_target_data_frame |>
dplyr::arrange(match(grna_id, grna_ids)) |>
tibble::column_to_rownames(var = "grna_id") |>
dplyr::mutate(targeting = grna_target != "non-targeting") |>
dplyr::relocate(targeting) |>
dplyr::rename(guide_target = grna_target)
if("chr" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(chr = ifelse(is.na(chr), "", chr)) |>
dplyr::rename(guide_chr = chr)
}
if("start" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(start = ifelse(is.na(start), -9, start)) |>
dplyr::rename(guide_start = start)
}
if("end" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(end = ifelse(is.na(end), -9, end)) |>
dplyr::rename(guide_end = end)
}
if("grna_group" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::select(-grna_group)
}
grna_rowdata |> head()
devtools::install("~/code/research/sceptreIGVF")
setwd("~/code/research/sceptre-igvf")
renv::activate()
renv::install("katsevich-lab/sceptreIGVF")
renv::status()
renv::snapshot()
source("create-sample-mudata.R")
reticulate::repl_python()
gasperini_data.obs
gasperini_data
reticulate::repl_python()
gasperini_data.obs
reticulate::repl_python()
sample_df
# 3. Extra gRNA and gene information
grna_ids <- rownames(grna_matrix)
grna_rowdata <- grna_target_data_frame |>
dplyr::arrange(match(grna_id, grna_ids)) |>
tibble::column_to_rownames(var = "grna_id") |>
dplyr::mutate(targeting = grna_target != "non-targeting") |>
dplyr::relocate(targeting) |>
dplyr::rename(guide_target = grna_target)
if("chr" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(chr = ifelse(is.na(chr), "", chr)) |>
dplyr::rename(guide_chr = chr)
}
if("start" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(start = ifelse(is.na(start), -9, start)) |>
dplyr::rename(guide_start = start)
}
if("end" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(end = ifelse(is.na(end), -9, end)) |>
dplyr::rename(guide_end = end)
}
if("grna_group" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::select(-grna_group)
}
if(sum(!is.na(gene_names)) > 0){
gene_rowdata <- data.frame(symbol = gene_names)
} else{
gene_rowdata <- NULL
}
# 4. Prepare for conversion to MuData
response_matrix <- methods::as(response_matrix, "CsparseMatrix")
grna_matrix <- methods::as(grna_matrix, "CsparseMatrix")
if(is.null(colnames(response_matrix))){
cell_ids <- paste0("cell_", 1:ncol(response_matrix))
} else{
cell_ids <- colnames(response_matrix)
}
colnames(response_matrix) <- cell_ids
colnames(grna_matrix) <- cell_ids
rownames(sample_df) <- cell_ids
pairs <- rbind(
positive_control_pairs |> dplyr::mutate(pair_type = "positive_control"),
discovery_pairs |> dplyr::mutate(pair_type = "discovery")
)
metadata <- list(moi = moi)
if(nrow(pairs) > 0){
metadata[["inference_results"]] = pairs |>
dplyr::select(grna_target, response_id, pair_type) |>
dplyr::rename(gene_id = response_id) |>
dplyr::mutate(p_value = -9, log_2_fold_change = -9) |>
MultiAssayExperiment::DataFrame()
}
# 5. Create MuData object
gene_se <- SummarizedExperiment::SummarizedExperiment(
assays = list(counts = response_matrix),
rowData = gene_rowdata
)
grna_se <- SummarizedExperiment::SummarizedExperiment(
assays = list(counts = grna_matrix),
rowData = grna_rowdata
)
if (!is.null(grna_assignment_matrix)) {
grna_assignment_se <- SummarizedExperiment::SummarizedExperiment(
assays = list(counts = grna_assignment_matrix),
)
} else {
grna_assignment_se <- NULL
}
experiment_list <- list(gene = gene_se, grna = grna_se)
if (!is.null(grna_assignment_se)) {
experiment_list[["grna_assignment"]] <- grna_assignment_se
}
mae <- MultiAssayExperiment::MultiAssayExperiment(
experiments = experiment_list,
colData = sample_df,
metadata = metadata
)
mae
mae |> colData()
covariate_df[[batch_cols]]
covariate_df[[batch_cols]] |> as.factor() |> as.integer()
getwd()
renv::install("katsevich-lab/sceptreIGVF")
renv::snapshot()
source("create-sample-mudata.R")
reticulate::repl_python()
data.frame(row.names = cell_ids)
data.frame(row.names = cell_ids) |> head()
data.frame(row.names = cell_ids) |> Data.Frame()
data.frame(row.names = cell_ids) |> MultiAssayExperiment::anyReplicated()Data.Frame()
data.frame(row.names = cell_ids) |> MultiAssayExperiment::Data.Frame()
data.frame(row.names = cell_ids) |> SummarizedExperiment::Data.Frame()
data.frame(row.names = cell_ids) |> SummarizedExperiment::DataFrame()
data.frame(row.names = cell_ids) |> MultiAssayExperiment::DataFrame()
devtools::load_all("../sceptreIGVF/")
mudata_highmoi <- sceptre_object_to_mudata(sceptre_object_highmoi)
sceptre_object <- sceptre_object_highmoi
# 1. Extract objects and subset to the set of cells in use
cells_in_use <- sceptre_object@cells_in_use
if(length(cells_in_use) == 0){
cells_in_use <- 1:ncol(sceptre_object@response_matrix)
}
response_matrix <- sceptre_object@response_matrix[, cells_in_use]
grna_matrix <- sceptre_object@grna_matrix[, cells_in_use]
grna_assignment_matrix <- extract_grna_assignment_matrix(sceptre_object)
if(!is.null(grna_assignment_matrix)){
grna_assignment_matrix <- grna_assignment_matrix[, cells_in_use]
}
covariate_df <- sceptre_object@covariate_data_frame[cells_in_use, ]
grna_target_data_frame <- sceptre_object@grna_target_data_frame
positive_control_pairs <- sceptre_object@positive_control_pairs
discovery_pairs <- sceptre_object@discovery_pairs
moi <- if(sceptre_object@low_moi) "low" else "high"
gene_names <- sceptre_object@response_names
# 2. Extract batch info, if present
batch_cols <- grep("rep|batch", names(covariate_df), ignore.case = TRUE)
# Check the number of matching columns and act accordingly
if (length(batch_cols) == 0) {
# No matching columns, create a DataFrame with all ones
sample_df <- MultiAssayExperiment::DataFrame(batch = rep(1, nrow(covariate_df)))
} else if (length(batch_cols) == 1) {
# One matching column, create a DataFrame with its contents
sample_df <- MultiAssayExperiment::DataFrame(
batch = covariate_df[[batch_cols]] |> as.factor() |> as.integer()
)
} else {
# More than one matching column, throw an error
stop("Error: More than one column found containing 'rep' or 'batch'")
}
# 3. Extra gRNA and gene information
grna_ids <- rownames(grna_matrix)
grna_rowdata <- grna_target_data_frame |>
dplyr::arrange(match(grna_id, grna_ids)) |>
tibble::column_to_rownames(var = "grna_id") |>
dplyr::mutate(targeting = grna_target != "non-targeting") |>
dplyr::relocate(targeting) |>
dplyr::rename(guide_target = grna_target)
if("chr" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(chr = ifelse(is.na(chr), "", chr)) |>
dplyr::rename(guide_chr = chr)
}
if("start" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(start = ifelse(is.na(start), -9, start)) |>
dplyr::rename(guide_start = start)
}
if("end" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::mutate(end = ifelse(is.na(end), -9, end)) |>
dplyr::rename(guide_end = end)
}
if("grna_group" %in% colnames(grna_rowdata)){
grna_rowdata <- grna_rowdata |>
dplyr::select(-grna_group)
}
if(sum(!is.na(gene_names)) > 0){
gene_rowdata <- data.frame(symbol = gene_names)
} else{
gene_rowdata <- NULL
}
# 4. Prepare for conversion to MuData
response_matrix <- methods::as(response_matrix, "CsparseMatrix")
grna_matrix <- methods::as(grna_matrix, "CsparseMatrix")
if(is.null(colnames(response_matrix))){
cell_ids <- paste0("cell_", 1:ncol(response_matrix))
} else{
cell_ids <- colnames(response_matrix)
}
colnames(response_matrix) <- cell_ids
colnames(grna_matrix) <- cell_ids
rownames(sample_df) <- cell_ids
pairs <- rbind(
positive_control_pairs |> dplyr::mutate(pair_type = "positive_control"),
discovery_pairs |> dplyr::mutate(pair_type = "discovery")
)
metadata <- list(moi = moi)
if(nrow(pairs) > 0){
metadata[["inference_results"]] = pairs |>
dplyr::select(grna_target, response_id, pair_type) |>
dplyr::rename(gene_id = response_id) |>
dplyr::mutate(p_value = -9, log_2_fold_change = -9) |>
MultiAssayExperiment::DataFrame()
}
# 5. Create MuData object
gene_se <- SummarizedExperiment::SummarizedExperiment(
assays = list(counts = response_matrix),
rowData = gene_rowdata
)
grna_se <- SummarizedExperiment::SummarizedExperiment(
assays = list(counts = grna_matrix),
rowData = grna_rowdata
)
!is.null(grna_assignment_matrix)
grna_assignment_se <- SummarizedExperiment::SummarizedExperiment(
assays = list(counts = grna_assignment_matrix),
rowData = data.frame(row.names = cell_ids)
)
gene_rowdata
grna_assignment_matrix[1:5,1:5]
devtools::load_all("../sceptreIGVF/")
mudata_highmoi <- sceptre_object_to_mudata(sceptre_object_highmoi)
mudata_highmoi
mudata_highmoi@ExperimentList$grna_assignment
mudata_highmoi@ExperimentList$grna
mudata_highmoi@ExperimentList$gene
getwd()
renv::install("katsevich-lab/sceptreIGVF")
renv::snapshot()
source("create-sample-mudata.R")
reticulate::repl_python()
renv::install("katsevich-lab/sceptreIGVF")
renv::snapshot()
source("create-sample-mudata.R")
reticulate::repl_python()
source("create-sample-mudata.R")
reticulate::repl_python()
renv::install("katsevich-lab/sceptreIGVF")
renv::snapshot()
source("create-sample-mudata.R")
source("create-sample-mudata.R")
renv::install("katsevich-lab/sceptreIGVF")
renv::snapshot()
source("create-sample-mudata.R")
reticulate::repl_python()
