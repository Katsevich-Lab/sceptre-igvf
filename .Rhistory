import mudata as md
import pandas as pd
pd.set_option('display.max_columns', None)
grna_assignment_input = md.read_h5mu("data/gasperini_grna_assignment_input_minimal.h5mu")
grna_assignment_input
grna_assignment_input['guide'].var.iloc[[0, 1, 2, 3, 100, 101]]
import mudata as md
import pandas as pd
grna_assignment_input = md.read_h5mu("data/papalexi_grna_assignment_input_minimal.h5mu")
grna_assignment_input = md.read_h5mu("data/papalexi_grna_assignment_input.h5mu")
grna_assignment_input['guide'].var.iloc[[0, 1, 2, 3, 100, 101]]
grna_assignment_input['guide'].var
grna_assignment_input['guide'].var.iloc[[0, 1, 50, 51]]
grna_assignment_input['guide'].var.iloc[[0, 1, 55, 56]]
grna_assignment_input['guide'].var.iloc[[0, 1, 57, 58, 59]]
import mudata as md
def validate_grna_assignment_input(file_path_or_object):
# Load the .h5mu file
if isinstance(file_path_or_object, str):
mu_data = md.read_h5mu(file_path_or_object)
else:
mu_data = file_path_or_object
# Initialize validation result
valid = True
messages = []
# Check for the presence of 'gene' and 'guide' modalities
if 'gene' not in mu_data.mod or 'guide' not in mu_data.mod:
valid = False
missing_modalities = [mod for mod in ['gene', 'guide'] if mod not in mu_data.mod]
messages.append(f"Missing required modalities: {', '.join(missing_modalities)}.")
# Validate 'gene' modality
if 'gene' in mu_data.mod:
if 'X' not in mu_data.mod['gene']:
valid = False
messages.append("'gene' modality must contain a .X matrix.")
# Validate 'guide' modality
if 'guide' in mu_data.mod:
if 'X' not in mu_data.mod['guide']:
valid = False
messages.append("'guide' modality must contain a .X matrix.")
if 'var' not in mu_data.mod['guide'] or not all(field in mu_data.mod['guide'].var for field in ['targeting', 'intended_target_name']):
valid = False
messages.append("'guide' modality must contain a .var DataFrame with 'targeting' and 'intended_target_name' fields.")
# Return the validation result
return valid, "; ".join(messages)
quite
def validate_grna_assignment_input(file_path_or_object):
# Load the .h5mu file
if isinstance(file_path_or_object, str):
mu_data = md.read_h5mu(file_path_or_object)
else:
mu_data = file_path_or_object
# Initialize validation result
valid = True
messages = []
# Check for the presence of 'gene' and 'guide' modalities
if 'gene' not in mu_data.mod or 'guide' not in mu_data.mod:
valid = False
missing_modalities = [mod for mod in ['gene', 'guide'] if mod not in mu_data.mod]
messages.append(f"Missing required modalities: {', '.join(missing_modalities)}.")
# Validate 'gene' modality
if 'gene' in mu_data.mod:
if 'X' not in mu_data.mod['gene']:
valid = False
messages.append("'gene' modality must contain a .X matrix.")
# Validate 'guide' modality
if 'guide' in mu_data.mod:
if 'X' not in mu_data.mod['guide']:
valid = False
messages.append("'guide' modality must contain a .X matrix.")
if 'var' not in mu_data.mod['guide'] or not all(field in mu_data.mod['guide'].var for field in ['targeting', 'intended_target_name']):
valid = False
messages.append("'guide' modality must contain a .var DataFrame with 'targeting' and 'intended_target_name' fields.")
# Return the validation result
return valid, "; ".join(messages)
q
import validate-mudata.py
validate_grna_assignment_input("data/papalexi_grna_assignment_input_minimal.h5mu")
valid, message = validate_grna_assignment_input("data/papalexi_grna_assignment_input_minimal.h5mu")
print(valid)
valid
message
file_path_or_object = "data/papalexi_grna_assignment_input_minimal.h5mu"
if isinstance(file_path_or_object, str):
mu_data = md.read_h5mu(file_path_or_object)
else:
mu_data = file_path_or_object
mu_data
isinstance(file_path_or_object, str)
if isinstance(file_path_or_object, str):
mu_data = md.read_h5mu(file_path_or_object)
else:
mu_data = file_path_or_object
mu_data
mu_data = md.read_h5mu(file_path_or_object)
mu_data
reticulate::repl_python()
getwd()
renv::install("katsevich-lab/sceptreIGVF")
renv::snapshot()
source("create-papalexi-subsample.R")
renv::install("katsevich-lab/sceptreIGVF")
renv::snapshot()
source("create-papalexi-subsample.R")
getwd()
devtools::load_all("../sceptreIGVF")
source("create-papalexi-subsample.R")
source("create-gasperini-subsample.R")
renv::install("katsevich-lab/sceptreIGVF")
renv::snapshot()
devtools::load_all("../sceptreIGVF")
source("create-gasperini-subsample.R")
reticulate::repl_python()
sceptre_object_to_mudata_inputs_outputs
# Convert to MuData inputs and outputs
mudata_list_highmoi <- sceptre_object_to_mudata_inputs_outputs(
sceptre_object = sceptre_object_highmoi,
num_discovery_pairs = NUM_DISCOVERY_PAIRS,
gene_info = gene_info_subset,
guide_capture_method = "CROP-seq"
)
mudata_list_highmoi$inference_output
mudata_list_highmoi$inference_output |> metadata()
mudata_list_highmoi$inference_input_minimal |> metadata()
# Save to disk
save_mudata_list(mudata_list = mudata_list_highmoi, path = "data", prefix = "gasperini_")
reticulate::repl_python()
mae_inference_input <- MuData::readH5MU("data/gasperini_inference_output_minimal.h5mu")
mae_inference_input
mae_inference_input |> metadata()
mae_inference_output <- MuData::readH5MU("data/gasperini_inference_output_minimal.h5mu")
mae_inference_output
mae_inference_output |> metadata() |> names()
reticulate::repl_python()
#' Convert sceptre_object a set of MuData objects to be used as inputs and outputs
#' for both gRNA assignment and inference
#'
#' @param sceptre_object Sceptre object
#' @param num_discovery_pairs Number of discovery pairs to sample
#' @param gene_info Gene information data frame (optional)
#'
#' @return List of MuData objects
#' @export
sceptre_object_to_mudata_inputs_outputs <- function(
sceptre_object,
num_discovery_pairs,
gene_info = NULL,
guide_capture_method = NULL
){
positive_control_pairs_2 <- sceptre_object |>
sceptre::get_result("run_power_check") |>
stats::na.omit() |>
dplyr::select(response_id, grna_target)
discovery_results <- sceptre_object |>
sceptre::get_result("run_discovery_analysis") |>
stats::na.omit()
num_significant <- discovery_results |>
dplyr::summarize(sum(significant)) |>
dplyr::pull()
num_non_significant <- discovery_results |>
dplyr::summarize(sum(!significant)) |>
dplyr::pull()
num_significant_to_keep <- min(num_significant, round(num_discovery_pairs/2))
num_non_significant_to_keep <- min(num_non_significant,
num_discovery_pairs - num_significant_to_keep)
discovery_pairs_2 <- rbind(
discovery_results |>
dplyr::filter(significant) |>
dplyr::slice_sample(n = num_significant_to_keep),
discovery_results |>
dplyr::filter(!significant) |>
dplyr::slice_sample(n = num_non_significant_to_keep)
) |>
dplyr::select(response_id, grna_target)
sceptre_object_2 <- sceptre_object |>
sceptre::set_analysis_parameters(
discovery_pairs = discovery_pairs_2,
positive_control_pairs = positive_control_pairs_2,
formula = sceptre_object@formula_object,
side = c("left", "both", "right")[sceptre_object@side_code + 2],
) |>
sceptre::assign_grnas(parallel = TRUE) |>
sceptre::run_qc() |>
sceptre::run_power_check(parallel = TRUE) |>
sceptre::run_discovery_analysis(parallel = TRUE)
mae_inference_output <- sceptre_object_to_mudata(sceptre_object_2)
if(!is.null(gene_info)){
SummarizedExperiment::rowData(mae_inference_output[["gene"]]) <- gene_info
}
if(!is.null(guide_capture_method)){
MultiAssayExperiment::metadata(mae_inference_output)$grna_capture_method <- guide_capture_method
}
mae_inference_input <- mae_inference_output
MultiAssayExperiment::metadata(mae_inference_input)$test_results <- NULL
mae_guide_assignment_output <- mae_inference_input
MultiAssayExperiment::metadata(mae_guide_assignment_output)$pairs_to_test <- NULL
mae_guide_assignment_input <- mae_guide_assignment_output
guide_assays_list <- SummarizedExperiment::assays(mae_guide_assignment_input[['guide']])
guide_assays_list$guide_assignment <- NULL
SummarizedExperiment::assays(mae_guide_assignment_input[['guide']]) <- guide_assays_list
mae_inference_output_minimal <- mae_inference_output
MultiAssayExperiment::colData(mae_inference_output_minimal) <- MultiAssayExperiment::DataFrame(
row.names = rownames(MultiAssayExperiment::colData(mae_inference_output_minimal))
)
SummarizedExperiment::rowData(mae_inference_output_minimal[['gene']]) <- NULL
SummarizedExperiment::colData(mae_inference_output_minimal[['gene']]) <- NULL
SummarizedExperiment::rowData(mae_inference_output_minimal[['guide']]) <-
SummarizedExperiment::rowData(mae_inference_output_minimal[['guide']])[,c("targeting", "intended_target_name")]
SummarizedExperiment::colData(mae_inference_output_minimal[['guide']]) <- NULL
MultiAssayExperiment::metadata(mae_inference_output_minimal)$pairs_to_test <-
MultiAssayExperiment::metadata(mae_inference_output_minimal)$pairs_to_test[,c("intended_target_name", "gene_id")]
MultiAssayExperiment::metadata(mae_inference_output_minimal)$test_results <-
MultiAssayExperiment::metadata(mae_inference_output_minimal)$test_results[,c("intended_target_name", "gene_id", "p_value")]
mae_inference_input_minimal <- mae_inference_output_minimal
MultiAssayExperiment::metadata(mae_inference_input_minimal)$test_results <- NULL
mae_guide_assignment_output_minimal <- mae_inference_input_minimal
MultiAssayExperiment::metadata(mae_guide_assignment_output_minimal)$pairs_to_test <- NULL
mae_guide_assignment_input_minimal <- mae_guide_assignment_output_minimal
guide_assays_list <- SummarizedExperiment::assays(mae_guide_assignment_input_minimal[['guide']])
guide_assays_list$guide_assignment <- NULL
SummarizedExperiment::assays(mae_guide_assignment_input_minimal[['guide']]) <- guide_assays_list
return(list(
inference_output = mae_inference_output,
inference_input = mae_inference_input,
guide_assignment_output = mae_guide_assignment_output,
guide_assignment_input = mae_guide_assignment_input,
inference_output_minimal = mae_inference_output_minimal,
inference_input_minimal = mae_inference_input_minimal,
guide_assignment_output_minimal = mae_guide_assignment_output_minimal,
guide_assignment_input_minimal = mae_guide_assignment_input_minimal)
)
}
# Convert to MuData inputs and outputs
mudata_list_highmoi <- sceptre_object_to_mudata_inputs_outputs(
sceptre_object = sceptre_object_highmoi,
num_discovery_pairs = NUM_DISCOVERY_PAIRS,
gene_info = gene_info_subset,
guide_capture_method = "CROP-seq"
)
mudata_list_highmoi$inference_output |> metadata()
# Save to disk
save_mudata_list(mudata_list = mudata_list_highmoi, path = "data", prefix = "gasperini_")
reticulate::repl_python()
load_all("../sceptreIGVF")
source("create-gasperini-subsample.R")
reticulate::repl_python()
